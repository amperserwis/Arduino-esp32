name: Run tests

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]

  schedule:
    - cron: '0 2 * * *'

env:
  MAX_CHUNKS: 15

concurrency:
  group: hil-${{github.event.pull_request.number || github.ref}}
  cancel-in-progress: true

jobs:
  gen_chunks:
    if: github.repository == 'espressif/arduino-esp32'
    name: Generate Chunks matrix
    runs-on: ubuntu-latest
    outputs:
      chunks: ${{ steps.gen-chunks.outputs.chunks }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Chunks matrix
        id: gen-chunks
        run: |
          set +e
          .github/scripts/sketch_utils.sh count tests
          sketches=$?
          if [[ $sketches -ge ${{env.MAX_CHUNKS}} ]]; then
            $sketches=${{env.MAX_CHUNKS}}
          fi
          set -e
          rm sketches.txt
          CHUNKS=$(jq -c -n '$ARGS.positional' --args `seq 0 1 $((sketches - 1))`)
          echo "chunks=${CHUNKS}" >>$GITHUB_OUTPUT

  build:
    needs: gen_chunks
    name: ${{matrix.chip}}-Build#${{matrix.chunks}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: ['esp32', 'esp32s2', 'esp32s3', 'esp32c3', 'esp32c6', 'esp32h2']
        chunks: ${{fromJson(needs.gen_chunks.outputs.chunks)}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Build sketches
        run: |
          bash .github/scripts/tests_build.sh -c -t ${{matrix.chip}} -i ${{matrix.chunks}} -m ${{env.MAX_CHUNKS}}
      - name: Upload ${{matrix.chip}}-${{matrix.chunks}} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.chip}}-${{matrix.chunks}}.artifacts
          path: |
             ~/.arduino/tests/*/build*.tmp/*.bin
             ~/.arduino/tests/*/build*.tmp/*.json
          if-no-files-found: error

  qemu-test:
    needs: [gen_chunks, build]
    name: ${{matrix.chip}}-QEMU_Test#${{matrix.chunks}}
    strategy:
      fail-fast: false
      matrix:
        chip: ['esp32', 'esp32c3'] # Currently only ESP32 and ESP32-C3 are supported by QEMU
        chunks: ${{fromJson(needs.gen_chunks.outputs.chunks)}}
    runs-on: ubuntu-latest
    env:
      QEMU_INSTALL_PATH: "$HOME"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get QEMU version
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        id: get-qemu-version
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          owner: espressif
          repo: qemu
          excludes: prerelease, draft

      - name: Cache tools
        id: cache-linux
        uses: actions/cache@v4
        with:
          path: |
            ~/qemu
            ~/.cache/pip
          key: ${{ steps.get-qemu-version.outputs.release }}-${{ hashFiles('.github/workflows/hil.yml') }}

      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -r tests/requirements.txt --extra-index-url https://dl.espressif.com/pypi
          sudo apt update && sudo apt install libpixman-1-0 libnuma1 libglib2.0-0 libslirp0 libsdl2-2.0-0

      - name: Download QEMU
        if: steps.cache-linux.outputs.cache-hit != 'true'
        run: |
          cd ${{ env.QEMU_INSTALL_PATH }}
          underscore_release=$(echo ${{ steps.get-qemu-version.outputs.release }} | sed 's/\-/_/g')
          curl -L https://github.com/espressif/qemu/releases/download/${{ steps.get-qemu-version.outputs.release }}/qemu-riscv32-softmmu-${underscore_release}-x86_64-linux-gnu.tar.xz > qemu-riscv32.tar.xz
          curl -L https://github.com/espressif/qemu/releases/download/${{ steps.get-qemu-version.outputs.release }}/qemu-xtensa-softmmu-${underscore_release}-x86_64-linux-gnu.tar.xz > qemu-xtensa.tar.xz
          tar -xf qemu-riscv32.tar.xz
          tar -xf qemu-xtensa.tar.xz
          rm qemu-*
          echo "QEMU_PATH=${{ env.QEMU_INSTALL_PATH }}/qemu" >> $GITHUB_ENV

      - name: Download ${{matrix.chip}}-${{matrix.chunks}} artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{matrix.chip}}-${{matrix.chunks}}.artifacts
          path: ~/.arduino/tests/

      - name: Run Tests
        run: QEMU_PATH="${{env.QEMU_PATH}}" bash .github/scripts/tests_run.sh -c -t ${{matrix.chip}} -i ${{matrix.chunks}} -m ${{env.MAX_CHUNKS}} -q

      - name: Upload test result artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qemu_results-${{matrix.chip}}-${{matrix.chunks}}
          path: tests/*/*.xml

  hardware-test:
    needs: [gen_chunks, build]
    name: ${{matrix.chip}}-Hardware_Test#${{matrix.chunks}}
    if: |
      contains(github.event.pull_request.labels.*.name, 'hil_test') || github.event_name == 'schedule'
    strategy:
      fail-fast: false
      matrix:
        chip: ['esp32', 'esp32s2', 'esp32s3', 'esp32c3', 'esp32c6', 'esp32h2']
        chunks: ${{fromJson(needs.gen_chunks.outputs.chunks)}}
    runs-on: [arduino, "${{matrix.chip}}"]
    container:
      image: python:3.10.1-bullseye
      options: --privileged

    steps:
       - name: Checkout repository
         uses: actions/checkout@v4

       - name: Download ${{matrix.chip}}-${{matrix.chunks}} artifacts
         uses: actions/download-artifact@v4
         with:
           name: ${{matrix.chip}}-${{matrix.chunks}}.artifacts
           path: ~/.arduino/tests/

       - name: Install dependencies
         run: |
           pip install -U pip
           pip install -r tests/requirements.txt --extra-index-url https://dl.espressif.com/pypi
           apt update && apt install -y -qq jq

       - name: Run Tests
         run: |
           bash .github/scripts/tests_run.sh -c -t ${{matrix.chip}} -i ${{matrix.chunks}} -m ${{env.MAX_CHUNKS}} -e

       - name: Upload test result artifacts
         uses: actions/upload-artifact@v4
         if: always()
         with:
           name: hw_results-${{matrix.chip}}-${{matrix.chunks}}
           path: tests/*/*.xml

  event_file:
    name: "Event File"
    if: ${{ always() && !failure() && !cancelled() }}
    needs: [hardware-test, qemu-test]
    runs-on: ubuntu-latest
    steps:
       - name: Upload
         uses: actions/upload-artifact@v4
         with:
           name: Event File
           path: ${{github.event_path}}
